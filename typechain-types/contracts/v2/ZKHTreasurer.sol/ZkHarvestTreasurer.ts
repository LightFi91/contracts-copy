/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export interface ZkHarvestTreasurerInterface extends utils.Interface {
  functions: {
    "MAX_LOCKUP_WEEKS()": FunctionFragment;
    "MIN_LOCKUP_WEEKS()": FunctionFragment;
    "claimReward(uint256[])": FunctionFragment;
    "claimRewardExpress(uint256[])": FunctionFragment;
    "claimableRewards(address)": FunctionFragment;
    "claimableWeeksToPay(address)": FunctionFragment;
    "expressClaimBurnBP()": FunctionFragment;
    "getRewardForWeek(address,uint256)": FunctionFragment;
    "initialize(address,uint256,uint256,uint256)": FunctionFragment;
    "lockedRewards(address)": FunctionFragment;
    "lockedRewardsBP()": FunctionFragment;
    "lockupTimeW()": FunctionFragment;
    "nextClaimableWeek()": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "rewardUser(address,uint256)": FunctionFragment;
    "totalLocked()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "unlockMoment()": FunctionFragment;
    "updateExpressClaimBurnBP(uint256)": FunctionFragment;
    "updateLockedRewardsBP(uint256)": FunctionFragment;
    "updateLockupTimeW(uint256)": FunctionFragment;
    "updateUnlockMoment(uint256)": FunctionFragment;
    "updateZkHarvest(address)": FunctionFragment;
    "weeksToPay(address)": FunctionFragment;
    "zkHarvest()": FunctionFragment;
    "zkh()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "MAX_LOCKUP_WEEKS"
      | "MIN_LOCKUP_WEEKS"
      | "claimReward"
      | "claimRewardExpress"
      | "claimableRewards"
      | "claimableWeeksToPay"
      | "expressClaimBurnBP"
      | "getRewardForWeek"
      | "initialize"
      | "lockedRewards"
      | "lockedRewardsBP"
      | "lockupTimeW"
      | "nextClaimableWeek"
      | "owner"
      | "renounceOwnership"
      | "rewardUser"
      | "totalLocked"
      | "transferOwnership"
      | "unlockMoment"
      | "updateExpressClaimBurnBP"
      | "updateLockedRewardsBP"
      | "updateLockupTimeW"
      | "updateUnlockMoment"
      | "updateZkHarvest"
      | "weeksToPay"
      | "zkHarvest"
      | "zkh"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "MAX_LOCKUP_WEEKS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MIN_LOCKUP_WEEKS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "claimReward",
    values: [PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "claimRewardExpress",
    values: [PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "claimableRewards",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "claimableWeeksToPay",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "expressClaimBurnBP",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRewardForWeek",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "lockedRewards",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "lockedRewardsBP",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lockupTimeW",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "nextClaimableWeek",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rewardUser",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "totalLocked",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "unlockMoment",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "updateExpressClaimBurnBP",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateLockedRewardsBP",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateLockupTimeW",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateUnlockMoment",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateZkHarvest",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "weeksToPay",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "zkHarvest", values?: undefined): string;
  encodeFunctionData(functionFragment: "zkh", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "MAX_LOCKUP_WEEKS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MIN_LOCKUP_WEEKS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimRewardExpress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimableRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimableWeeksToPay",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "expressClaimBurnBP",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRewardForWeek",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "lockedRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lockedRewardsBP",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lockupTimeW",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nextClaimableWeek",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "rewardUser", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalLocked",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unlockMoment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateExpressClaimBurnBP",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateLockedRewardsBP",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateLockupTimeW",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateUnlockMoment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateZkHarvest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "weeksToPay", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "zkHarvest", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "zkh", data: BytesLike): Result;

  events: {
    "Claim(address,uint256)": EventFragment;
    "ExpressClaim(address,uint256,uint256)": EventFragment;
    "Initialized(uint8)": EventFragment;
    "LockUp(address,uint256,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Claim"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ExpressClaim"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LockUp"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export interface ClaimEventObject {
  user: string;
  amount: BigNumber;
}
export type ClaimEvent = TypedEvent<[string, BigNumber], ClaimEventObject>;

export type ClaimEventFilter = TypedEventFilter<ClaimEvent>;

export interface ExpressClaimEventObject {
  user: string;
  amountClaimed: BigNumber;
  amountBurnt: BigNumber;
}
export type ExpressClaimEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  ExpressClaimEventObject
>;

export type ExpressClaimEventFilter = TypedEventFilter<ExpressClaimEvent>;

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface LockUpEventObject {
  user: string;
  amount: BigNumber;
  time: BigNumber;
}
export type LockUpEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  LockUpEventObject
>;

export type LockUpEventFilter = TypedEventFilter<LockUpEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface ZkHarvestTreasurer extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ZkHarvestTreasurerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    MAX_LOCKUP_WEEKS(overrides?: CallOverrides): Promise<[BigNumber]>;

    MIN_LOCKUP_WEEKS(overrides?: CallOverrides): Promise<[BigNumber]>;

    claimReward(
      _weeksToClaim: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    claimRewardExpress(
      _weeksToClaim: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    claimableRewards(
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    claimableWeeksToPay(
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    expressClaimBurnBP(overrides?: CallOverrides): Promise<[BigNumber]>;

    getRewardForWeek(
      _user: PromiseOrValue<string>,
      _week: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    initialize(
      _zkh: PromiseOrValue<string>,
      _lockedRewardsBP: PromiseOrValue<BigNumberish>,
      _expressClaimBurnBP: PromiseOrValue<BigNumberish>,
      _lockupTimeW: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    lockedRewards(
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    lockedRewardsBP(overrides?: CallOverrides): Promise<[BigNumber]>;

    lockupTimeW(overrides?: CallOverrides): Promise<[BigNumber]>;

    nextClaimableWeek(overrides?: CallOverrides): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    rewardUser(
      _user: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    totalLocked(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    unlockMoment(overrides?: CallOverrides): Promise<[BigNumber]>;

    updateExpressClaimBurnBP(
      _newExpressClaimBurnBP: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateLockedRewardsBP(
      _newLockedRewardsBP: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateLockupTimeW(
      _newLockupTimeW: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateUnlockMoment(
      _newMoment: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateZkHarvest(
      _newZkHarvest: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    weeksToPay(
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    zkHarvest(overrides?: CallOverrides): Promise<[string]>;

    zkh(overrides?: CallOverrides): Promise<[string]>;
  };

  MAX_LOCKUP_WEEKS(overrides?: CallOverrides): Promise<BigNumber>;

  MIN_LOCKUP_WEEKS(overrides?: CallOverrides): Promise<BigNumber>;

  claimReward(
    _weeksToClaim: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  claimRewardExpress(
    _weeksToClaim: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  claimableRewards(
    _user: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  claimableWeeksToPay(
    _user: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  expressClaimBurnBP(overrides?: CallOverrides): Promise<BigNumber>;

  getRewardForWeek(
    _user: PromiseOrValue<string>,
    _week: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  initialize(
    _zkh: PromiseOrValue<string>,
    _lockedRewardsBP: PromiseOrValue<BigNumberish>,
    _expressClaimBurnBP: PromiseOrValue<BigNumberish>,
    _lockupTimeW: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  lockedRewards(
    _user: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  lockedRewardsBP(overrides?: CallOverrides): Promise<BigNumber>;

  lockupTimeW(overrides?: CallOverrides): Promise<BigNumber>;

  nextClaimableWeek(overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  rewardUser(
    _user: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  totalLocked(overrides?: CallOverrides): Promise<BigNumber>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  unlockMoment(overrides?: CallOverrides): Promise<BigNumber>;

  updateExpressClaimBurnBP(
    _newExpressClaimBurnBP: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateLockedRewardsBP(
    _newLockedRewardsBP: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateLockupTimeW(
    _newLockupTimeW: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateUnlockMoment(
    _newMoment: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateZkHarvest(
    _newZkHarvest: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  weeksToPay(
    _user: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  zkHarvest(overrides?: CallOverrides): Promise<string>;

  zkh(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    MAX_LOCKUP_WEEKS(overrides?: CallOverrides): Promise<BigNumber>;

    MIN_LOCKUP_WEEKS(overrides?: CallOverrides): Promise<BigNumber>;

    claimReward(
      _weeksToClaim: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    claimRewardExpress(
      _weeksToClaim: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    claimableRewards(
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claimableWeeksToPay(
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    expressClaimBurnBP(overrides?: CallOverrides): Promise<BigNumber>;

    getRewardForWeek(
      _user: PromiseOrValue<string>,
      _week: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      _zkh: PromiseOrValue<string>,
      _lockedRewardsBP: PromiseOrValue<BigNumberish>,
      _expressClaimBurnBP: PromiseOrValue<BigNumberish>,
      _lockupTimeW: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    lockedRewards(
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lockedRewardsBP(overrides?: CallOverrides): Promise<BigNumber>;

    lockupTimeW(overrides?: CallOverrides): Promise<BigNumber>;

    nextClaimableWeek(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    rewardUser(
      _user: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    totalLocked(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    unlockMoment(overrides?: CallOverrides): Promise<BigNumber>;

    updateExpressClaimBurnBP(
      _newExpressClaimBurnBP: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateLockedRewardsBP(
      _newLockedRewardsBP: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateLockupTimeW(
      _newLockupTimeW: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateUnlockMoment(
      _newMoment: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateZkHarvest(
      _newZkHarvest: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    weeksToPay(
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    zkHarvest(overrides?: CallOverrides): Promise<string>;

    zkh(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "Claim(address,uint256)"(
      user?: PromiseOrValue<string> | null,
      amount?: null
    ): ClaimEventFilter;
    Claim(
      user?: PromiseOrValue<string> | null,
      amount?: null
    ): ClaimEventFilter;

    "ExpressClaim(address,uint256,uint256)"(
      user?: PromiseOrValue<string> | null,
      amountClaimed?: null,
      amountBurnt?: null
    ): ExpressClaimEventFilter;
    ExpressClaim(
      user?: PromiseOrValue<string> | null,
      amountClaimed?: null,
      amountBurnt?: null
    ): ExpressClaimEventFilter;

    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "LockUp(address,uint256,uint256)"(
      user?: PromiseOrValue<string> | null,
      amount?: null,
      time?: null
    ): LockUpEventFilter;
    LockUp(
      user?: PromiseOrValue<string> | null,
      amount?: null,
      time?: null
    ): LockUpEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
  };

  estimateGas: {
    MAX_LOCKUP_WEEKS(overrides?: CallOverrides): Promise<BigNumber>;

    MIN_LOCKUP_WEEKS(overrides?: CallOverrides): Promise<BigNumber>;

    claimReward(
      _weeksToClaim: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    claimRewardExpress(
      _weeksToClaim: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    claimableRewards(
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claimableWeeksToPay(
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    expressClaimBurnBP(overrides?: CallOverrides): Promise<BigNumber>;

    getRewardForWeek(
      _user: PromiseOrValue<string>,
      _week: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      _zkh: PromiseOrValue<string>,
      _lockedRewardsBP: PromiseOrValue<BigNumberish>,
      _expressClaimBurnBP: PromiseOrValue<BigNumberish>,
      _lockupTimeW: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    lockedRewards(
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lockedRewardsBP(overrides?: CallOverrides): Promise<BigNumber>;

    lockupTimeW(overrides?: CallOverrides): Promise<BigNumber>;

    nextClaimableWeek(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    rewardUser(
      _user: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    totalLocked(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    unlockMoment(overrides?: CallOverrides): Promise<BigNumber>;

    updateExpressClaimBurnBP(
      _newExpressClaimBurnBP: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateLockedRewardsBP(
      _newLockedRewardsBP: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateLockupTimeW(
      _newLockupTimeW: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateUnlockMoment(
      _newMoment: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateZkHarvest(
      _newZkHarvest: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    weeksToPay(
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    zkHarvest(overrides?: CallOverrides): Promise<BigNumber>;

    zkh(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    MAX_LOCKUP_WEEKS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MIN_LOCKUP_WEEKS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    claimReward(
      _weeksToClaim: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    claimRewardExpress(
      _weeksToClaim: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    claimableRewards(
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    claimableWeeksToPay(
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    expressClaimBurnBP(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRewardForWeek(
      _user: PromiseOrValue<string>,
      _week: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      _zkh: PromiseOrValue<string>,
      _lockedRewardsBP: PromiseOrValue<BigNumberish>,
      _expressClaimBurnBP: PromiseOrValue<BigNumberish>,
      _lockupTimeW: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    lockedRewards(
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lockedRewardsBP(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lockupTimeW(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nextClaimableWeek(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    rewardUser(
      _user: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    totalLocked(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    unlockMoment(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    updateExpressClaimBurnBP(
      _newExpressClaimBurnBP: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateLockedRewardsBP(
      _newLockedRewardsBP: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateLockupTimeW(
      _newLockupTimeW: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateUnlockMoment(
      _newMoment: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateZkHarvest(
      _newZkHarvest: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    weeksToPay(
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    zkHarvest(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    zkh(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
