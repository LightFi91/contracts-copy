/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  ZKHarvestERC20,
  ZKHarvestERC20Interface,
} from "../../../contracts/v2/ZKHarvestERC20";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Approval",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint8",
        name: "version",
        type: "uint8",
      },
    ],
    name: "Initialized",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Transfer",
    type: "event",
  },
  {
    inputs: [],
    name: "DOMAIN_SEPARATOR",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "PERMIT_TYPEHASH",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "allowance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "approve",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "decimals",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "initialize",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "nonces",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "deadline",
        type: "uint256",
      },
      {
        internalType: "uint8",
        name: "v",
        type: "uint8",
      },
      {
        internalType: "bytes32",
        name: "r",
        type: "bytes32",
      },
      {
        internalType: "bytes32",
        name: "s",
        type: "bytes32",
      },
    ],
    name: "permit",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "symbol",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totalSupply",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "transfer",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "transferFrom",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x6080806040523461001657610a31908161001c8239f35b600080fdfe608060408181526004918236101561001657600080fd5b600092833560e01c91826306fdde031461080657508163095ea7b3146107dc57816318160ddd146107bd57816323b872dd1461070f57816330adf81f146106d4578163313ce567146106b85781633644e5151461069a57816370a08231146106635781637ecebe001461062c5781638129fc1c1461042557816395d89b41146103e3578163a9059cbb14610349578163d505accf1461010a575063dd62ed3e146100bf57600080fd5b34610106578060031936011261010657806020926100db6108c6565b6100e36108e1565b6001600160a01b0391821683526003865283832091168252845220549051908152f35b5080fd5b839150346101065760e0366003190112610106576101266108c6565b61012e6108e1565b906044359260643560843560ff811680910361034557428210610302578254916001600160a01b039182861693848a5260056020528a8a209283549360001985146102ef57908493929160018e960190558451938760208601967f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c98852860152868b1660608601528b608086015260a085015260c084015260c0835260e0830167ffffffffffffffff94848210868311176102dc57818e528451902061010085019261190160f01b845261010286015261012285015260428152610160840194818610908611176102c957848d52519020835261018082015260a4356101a082015260c4356101c090910152878052602090889060809060015afa156102bf578651169081151591826102b5575b505015610272575061026f9394506108f7565b80f35b606490602087519162461bcd60e51b8352820152601c60248201527f7a6b486172766573743a20494e56414c49445f5349474e4154555245000000006044820152fd5b149050878061025c565b87513d88823e3d90fd5b634e487b7160e01b8c526041885260248cfd5b634e487b7160e01b8d526041895260248dfd5b634e487b7160e01b8c526011885260248cfd5b875162461bcd60e51b8152602081850152601260248201527f7a6b486172766573743a204558504952454400000000000000000000000000006044820152606490fd5b8680fd5b905082346103e057826003193601126103e057506103656108c6565b906001600160a01b0382161561038c57602083610385602435853361094f565b5160018152f35b608490602084519162461bcd60e51b8352820152602860248201527f7a6b486172766573743a20544f2063616e6e6f7420626520746865207a65726f604482015267206164647265737360c01b6064820152fd5b80fd5b5050346101065781600319360112610106578051610421916104048261084b565b600682526505a4b482d4c560d41b6020830152519182918261087d565b0390f35b90503461062857826003193601126106285782549060ff8260081c16159182809361061b575b8015610604575b156105aa5760ff198116600117855582610599575b506c7a6b48617276657374204c507360981b602084516104868161084b565b600d81520152603160f81b6020845161049e8161084b565b600181520152825160208101907f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f82527fbf88056fc44f8198049becbe9a5f91902361fb875db3448737d3eb198d841f3d858201527fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc660608201524660808201523060a082015260a0815260c081019481861067ffffffffffffffff871117610586578590525190209055610551575080f35b60207f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989161ff0019845416845560018152a180f35b634e487b7160e01b875260418452602487fd5b61ffff191661010117845538610467565b835162461bcd60e51b8152602081840152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608490fd5b50303b1580156104525750600160ff821614610452565b50600160ff82161061044b565b8280fd5b50503461010657602036600319011261010657806020926001600160a01b036106536108c6565b1681526005845220549051908152f35b50503461010657602036600319011261010657806020926001600160a01b0361068a6108c6565b1681526002845220549051908152f35b90503461062857826003193601126106285760209250549051908152f35b5050346101065781600319360112610106576020905160128152f35b505034610106578160031936011261010657602090517f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c98152f35b8383346101065760603660031901126101065761072a6108c6565b6107326108e1565b604435916001600160a01b038116808652602095600387528581203382528752600019868220540361076c575b505090610385929161094f565b81815260038752858120338252875285812054918583039283116107aa5781526003875285812033825287528590205593945084936103858761075f565b634e487b7160e01b825260118952602482fd5b5050346101065781600319360112610106576020906001549051908152f35b5050346101065780600319360112610106576020906103856107fc6108c6565b60243590336108f7565b8490843461062857826003193601126106285761042192506108278261084b565b600d82526c7a6b48617276657374204c507360981b6020830152519182918261087d565b6040810190811067ffffffffffffffff82111761086757604052565b634e487b7160e01b600052604160045260246000fd5b6020808252825181830181905290939260005b8281106108b257505060409293506000838284010152601f8019910116010190565b818101860151848201604001528501610890565b600435906001600160a01b03821682036108dc57565b600080fd5b602435906001600160a01b03821682036108dc57565b909160207f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925916001600160a01b03809416938460005260038352604060002095169485600052825280604060002055604051908152a3565b90916001600160a01b0380921691600093838552600260205260408520548381039081116109e7578486526002602052604086205516928381526040812054908282018092116109d35791602091604084877fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9652600285522055604051908152a3565b634e487b7160e01b81526011600452602490fd5b634e487b7160e01b86526011600452602486fdfea26469706673582212207f3c2316775503a6ba6cf0d1f060a105f78912f0810425fa8a1e8ba3ec92834e64736f6c63430008110033";

type ZKHarvestERC20ConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ZKHarvestERC20ConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ZKHarvestERC20__factory extends ContractFactory {
  constructor(...args: ZKHarvestERC20ConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ZKHarvestERC20> {
    return super.deploy(overrides || {}) as Promise<ZKHarvestERC20>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): ZKHarvestERC20 {
    return super.attach(address) as ZKHarvestERC20;
  }
  override connect(signer: Signer): ZKHarvestERC20__factory {
    return super.connect(signer) as ZKHarvestERC20__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ZKHarvestERC20Interface {
    return new utils.Interface(_abi) as ZKHarvestERC20Interface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ZKHarvestERC20 {
    return new Contract(address, _abi, signerOrProvider) as ZKHarvestERC20;
  }
}
