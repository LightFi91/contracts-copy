/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export interface ZkHarvestInterface extends utils.Interface {
  functions: {
    "MAX_DEPOSIT_FEE_BP()": FunctionFragment;
    "MAX_HARVEST_INTERVAL()": FunctionFragment;
    "MAX_ZKH_PER_SECOND()": FunctionFragment;
    "ZKHPerSecond()": FunctionFragment;
    "canHarvest(uint256,address)": FunctionFragment;
    "catInfo(uint256)": FunctionFragment;
    "catPools(uint256,uint256)": FunctionFragment;
    "categoriesLength()": FunctionFragment;
    "createCategory(string,uint256,bool)": FunctionFragment;
    "createPool(uint256,address,uint256,uint256,uint256,bool)": FunctionFragment;
    "deposit(uint256,uint256)": FunctionFragment;
    "dev()": FunctionFragment;
    "devZKHPerSecond()": FunctionFragment;
    "editCategory(uint256,uint256,bool)": FunctionFragment;
    "editPool(uint256,uint256,uint256,uint256,bool)": FunctionFragment;
    "elapsedTime()": FunctionFragment;
    "emergencyWithdraw(uint256)": FunctionFragment;
    "endTime()": FunctionFragment;
    "farmingDuration()": FunctionFragment;
    "feeCollector()": FunctionFragment;
    "getMultiplier(uint256,uint256)": FunctionFragment;
    "massUpdatePools()": FunctionFragment;
    "owner()": FunctionFragment;
    "pendingReward(uint256,address)": FunctionFragment;
    "poolInfo(uint256)": FunctionFragment;
    "poolsInCategory(uint256)": FunctionFragment;
    "poolsLength()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "rewardZKHPerSecond()": FunctionFragment;
    "startTime()": FunctionFragment;
    "tokensAdded(address)": FunctionFragment;
    "totalCatAllocPoints()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "treasurer()": FunctionFragment;
    "updateDev(address)": FunctionFragment;
    "updateEndTime(bool)": FunctionFragment;
    "updateFeeCollector(address)": FunctionFragment;
    "updatePool(uint256)": FunctionFragment;
    "updateStartTime(uint256)": FunctionFragment;
    "updateZKHPerSecond(uint256,bool)": FunctionFragment;
    "userInfo(uint256,address)": FunctionFragment;
    "withdraw(uint256,uint256)": FunctionFragment;
    "zkh()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "MAX_DEPOSIT_FEE_BP"
      | "MAX_HARVEST_INTERVAL"
      | "MAX_ZKH_PER_SECOND"
      | "ZKHPerSecond"
      | "canHarvest"
      | "catInfo"
      | "catPools"
      | "categoriesLength"
      | "createCategory"
      | "createPool"
      | "deposit"
      | "dev"
      | "devZKHPerSecond"
      | "editCategory"
      | "editPool"
      | "elapsedTime"
      | "emergencyWithdraw"
      | "endTime"
      | "farmingDuration"
      | "feeCollector"
      | "getMultiplier"
      | "massUpdatePools"
      | "owner"
      | "pendingReward"
      | "poolInfo"
      | "poolsInCategory"
      | "poolsLength"
      | "renounceOwnership"
      | "rewardZKHPerSecond"
      | "startTime"
      | "tokensAdded"
      | "totalCatAllocPoints"
      | "transferOwnership"
      | "treasurer"
      | "updateDev"
      | "updateEndTime"
      | "updateFeeCollector"
      | "updatePool"
      | "updateStartTime"
      | "updateZKHPerSecond"
      | "userInfo"
      | "withdraw"
      | "zkh"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "MAX_DEPOSIT_FEE_BP",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_HARVEST_INTERVAL",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_ZKH_PER_SECOND",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ZKHPerSecond",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "canHarvest",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "catInfo",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "catPools",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "categoriesLength",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "createCategory",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "createPool",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "dev", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "devZKHPerSecond",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "editCategory",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "editPool",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "elapsedTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyWithdraw",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "endTime", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "farmingDuration",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "feeCollector",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getMultiplier",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "massUpdatePools",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pendingReward",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "poolInfo",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "poolsInCategory",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "poolsLength",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rewardZKHPerSecond",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "startTime", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "tokensAdded",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "totalCatAllocPoints",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "treasurer", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "updateDev",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateEndTime",
    values: [PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateFeeCollector",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "updatePool",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateStartTime",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateZKHPerSecond",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "userInfo",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "zkh", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "MAX_DEPOSIT_FEE_BP",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAX_HARVEST_INTERVAL",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAX_ZKH_PER_SECOND",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ZKHPerSecond",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "canHarvest", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "catInfo", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "catPools", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "categoriesLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createCategory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "createPool", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "dev", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "devZKHPerSecond",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "editCategory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "editPool", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "elapsedTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "endTime", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "farmingDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "feeCollector",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMultiplier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "massUpdatePools",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pendingReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "poolInfo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "poolsInCategory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "poolsLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardZKHPerSecond",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "startTime", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tokensAdded",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalCatAllocPoints",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "treasurer", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "updateDev", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateEndTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateFeeCollector",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "updatePool", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateStartTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateZKHPerSecond",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "userInfo", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "zkh", data: BytesLike): Result;

  events: {
    "CategoryCreate(uint256,string,uint256)": EventFragment;
    "CategoryEdit(uint256,uint256)": EventFragment;
    "Deposit(address,uint256,uint256,uint256)": EventFragment;
    "EmergencyWithdraw(address,uint256,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "PoolCreate(address,uint256,uint256,uint256,uint256)": EventFragment;
    "PoolEdit(address,uint256,uint256,uint256,uint256)": EventFragment;
    "Withdraw(address,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "CategoryCreate"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CategoryEdit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Deposit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EmergencyWithdraw"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PoolCreate"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PoolEdit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdraw"): EventFragment;
}

export interface CategoryCreateEventObject {
  id: BigNumber;
  name: string;
  allocPoints: BigNumber;
}
export type CategoryCreateEvent = TypedEvent<
  [BigNumber, string, BigNumber],
  CategoryCreateEventObject
>;

export type CategoryCreateEventFilter = TypedEventFilter<CategoryCreateEvent>;

export interface CategoryEditEventObject {
  id: BigNumber;
  allocPoints: BigNumber;
}
export type CategoryEditEvent = TypedEvent<
  [BigNumber, BigNumber],
  CategoryEditEventObject
>;

export type CategoryEditEventFilter = TypedEventFilter<CategoryEditEvent>;

export interface DepositEventObject {
  user: string;
  pid: BigNumber;
  amount: BigNumber;
  fee: BigNumber;
}
export type DepositEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber],
  DepositEventObject
>;

export type DepositEventFilter = TypedEventFilter<DepositEvent>;

export interface EmergencyWithdrawEventObject {
  user: string;
  pid: BigNumber;
  amount: BigNumber;
}
export type EmergencyWithdrawEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  EmergencyWithdrawEventObject
>;

export type EmergencyWithdrawEventFilter =
  TypedEventFilter<EmergencyWithdrawEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface PoolCreateEventObject {
  token: string;
  catId: BigNumber;
  allocPoints: BigNumber;
  depositFeeBP: BigNumber;
  harvestInterval: BigNumber;
}
export type PoolCreateEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber, BigNumber],
  PoolCreateEventObject
>;

export type PoolCreateEventFilter = TypedEventFilter<PoolCreateEvent>;

export interface PoolEditEventObject {
  token: string;
  catId: BigNumber;
  allocPoints: BigNumber;
  depositFeeBP: BigNumber;
  harvestInterval: BigNumber;
}
export type PoolEditEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber, BigNumber],
  PoolEditEventObject
>;

export type PoolEditEventFilter = TypedEventFilter<PoolEditEvent>;

export interface WithdrawEventObject {
  user: string;
  pid: BigNumber;
  amount: BigNumber;
}
export type WithdrawEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  WithdrawEventObject
>;

export type WithdrawEventFilter = TypedEventFilter<WithdrawEvent>;

export interface ZkHarvest extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ZkHarvestInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    MAX_DEPOSIT_FEE_BP(overrides?: CallOverrides): Promise<[BigNumber]>;

    MAX_HARVEST_INTERVAL(overrides?: CallOverrides): Promise<[BigNumber]>;

    MAX_ZKH_PER_SECOND(overrides?: CallOverrides): Promise<[BigNumber]>;

    ZKHPerSecond(overrides?: CallOverrides): Promise<[BigNumber]>;

    canHarvest(
      _poolId: PromiseOrValue<BigNumberish>,
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    catInfo(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, string] & {
        allocPoints: BigNumber;
        totalPoolAllocPoints: BigNumber;
        name: string;
      }
    >;

    catPools(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    categoriesLength(overrides?: CallOverrides): Promise<[BigNumber]>;

    createCategory(
      _name: PromiseOrValue<string>,
      _allocPoints: PromiseOrValue<BigNumberish>,
      _withUpdate: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    createPool(
      _catId: PromiseOrValue<BigNumberish>,
      _token: PromiseOrValue<string>,
      _allocPoints: PromiseOrValue<BigNumberish>,
      _depositFeeBP: PromiseOrValue<BigNumberish>,
      _harvestInterval: PromiseOrValue<BigNumberish>,
      _withUpdate: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    deposit(
      _poolId: PromiseOrValue<BigNumberish>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    dev(overrides?: CallOverrides): Promise<[string]>;

    devZKHPerSecond(overrides?: CallOverrides): Promise<[BigNumber]>;

    editCategory(
      _catId: PromiseOrValue<BigNumberish>,
      _allocPoints: PromiseOrValue<BigNumberish>,
      _withUpdate: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    editPool(
      _poolId: PromiseOrValue<BigNumberish>,
      _allocPoints: PromiseOrValue<BigNumberish>,
      _depositFeeBP: PromiseOrValue<BigNumberish>,
      _harvestInterval: PromiseOrValue<BigNumberish>,
      _withUpdate: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    elapsedTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    emergencyWithdraw(
      _poolId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    endTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    farmingDuration(overrides?: CallOverrides): Promise<[BigNumber]>;

    feeCollector(overrides?: CallOverrides): Promise<[string]>;

    getMultiplier(
      _from: PromiseOrValue<BigNumberish>,
      _to: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    massUpdatePools(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pendingReward(
      _poolId: PromiseOrValue<BigNumberish>,
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    poolInfo(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        token: string;
        catId: BigNumber;
        allocPoints: BigNumber;
        lastRewardTime: BigNumber;
        accZKHPerShare: BigNumber;
        depositFeeBP: BigNumber;
        harvestInterval: BigNumber;
      }
    >;

    poolsInCategory(
      _catId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    poolsLength(overrides?: CallOverrides): Promise<[BigNumber]>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    rewardZKHPerSecond(overrides?: CallOverrides): Promise<[BigNumber]>;

    startTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    tokensAdded(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    totalCatAllocPoints(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    treasurer(overrides?: CallOverrides): Promise<[string]>;

    updateDev(
      _newDev: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateEndTime(
      _withUpdate: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateFeeCollector(
      _newFeeCollector: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updatePool(
      _poolId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateStartTime(
      _newStartTime: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateZKHPerSecond(
      _newZKHPerSecond: PromiseOrValue<BigNumberish>,
      _withUpdate: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    userInfo(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        amount: BigNumber;
        rewardDebt: BigNumber;
        nextHarvestTime: BigNumber;
        lockedReward: BigNumber;
      }
    >;

    withdraw(
      _poolId: PromiseOrValue<BigNumberish>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    zkh(overrides?: CallOverrides): Promise<[string]>;
  };

  MAX_DEPOSIT_FEE_BP(overrides?: CallOverrides): Promise<BigNumber>;

  MAX_HARVEST_INTERVAL(overrides?: CallOverrides): Promise<BigNumber>;

  MAX_ZKH_PER_SECOND(overrides?: CallOverrides): Promise<BigNumber>;

  ZKHPerSecond(overrides?: CallOverrides): Promise<BigNumber>;

  canHarvest(
    _poolId: PromiseOrValue<BigNumberish>,
    _user: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  catInfo(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, string] & {
      allocPoints: BigNumber;
      totalPoolAllocPoints: BigNumber;
      name: string;
    }
  >;

  catPools(
    arg0: PromiseOrValue<BigNumberish>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  categoriesLength(overrides?: CallOverrides): Promise<BigNumber>;

  createCategory(
    _name: PromiseOrValue<string>,
    _allocPoints: PromiseOrValue<BigNumberish>,
    _withUpdate: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  createPool(
    _catId: PromiseOrValue<BigNumberish>,
    _token: PromiseOrValue<string>,
    _allocPoints: PromiseOrValue<BigNumberish>,
    _depositFeeBP: PromiseOrValue<BigNumberish>,
    _harvestInterval: PromiseOrValue<BigNumberish>,
    _withUpdate: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  deposit(
    _poolId: PromiseOrValue<BigNumberish>,
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  dev(overrides?: CallOverrides): Promise<string>;

  devZKHPerSecond(overrides?: CallOverrides): Promise<BigNumber>;

  editCategory(
    _catId: PromiseOrValue<BigNumberish>,
    _allocPoints: PromiseOrValue<BigNumberish>,
    _withUpdate: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  editPool(
    _poolId: PromiseOrValue<BigNumberish>,
    _allocPoints: PromiseOrValue<BigNumberish>,
    _depositFeeBP: PromiseOrValue<BigNumberish>,
    _harvestInterval: PromiseOrValue<BigNumberish>,
    _withUpdate: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  elapsedTime(overrides?: CallOverrides): Promise<BigNumber>;

  emergencyWithdraw(
    _poolId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  endTime(overrides?: CallOverrides): Promise<BigNumber>;

  farmingDuration(overrides?: CallOverrides): Promise<BigNumber>;

  feeCollector(overrides?: CallOverrides): Promise<string>;

  getMultiplier(
    _from: PromiseOrValue<BigNumberish>,
    _to: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  massUpdatePools(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  pendingReward(
    _poolId: PromiseOrValue<BigNumberish>,
    _user: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber]>;

  poolInfo(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      token: string;
      catId: BigNumber;
      allocPoints: BigNumber;
      lastRewardTime: BigNumber;
      accZKHPerShare: BigNumber;
      depositFeeBP: BigNumber;
      harvestInterval: BigNumber;
    }
  >;

  poolsInCategory(
    _catId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  poolsLength(overrides?: CallOverrides): Promise<BigNumber>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  rewardZKHPerSecond(overrides?: CallOverrides): Promise<BigNumber>;

  startTime(overrides?: CallOverrides): Promise<BigNumber>;

  tokensAdded(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  totalCatAllocPoints(overrides?: CallOverrides): Promise<BigNumber>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  treasurer(overrides?: CallOverrides): Promise<string>;

  updateDev(
    _newDev: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateEndTime(
    _withUpdate: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateFeeCollector(
    _newFeeCollector: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updatePool(
    _poolId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateStartTime(
    _newStartTime: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateZKHPerSecond(
    _newZKHPerSecond: PromiseOrValue<BigNumberish>,
    _withUpdate: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  userInfo(
    arg0: PromiseOrValue<BigNumberish>,
    arg1: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber] & {
      amount: BigNumber;
      rewardDebt: BigNumber;
      nextHarvestTime: BigNumber;
      lockedReward: BigNumber;
    }
  >;

  withdraw(
    _poolId: PromiseOrValue<BigNumberish>,
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  zkh(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    MAX_DEPOSIT_FEE_BP(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_HARVEST_INTERVAL(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_ZKH_PER_SECOND(overrides?: CallOverrides): Promise<BigNumber>;

    ZKHPerSecond(overrides?: CallOverrides): Promise<BigNumber>;

    canHarvest(
      _poolId: PromiseOrValue<BigNumberish>,
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    catInfo(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, string] & {
        allocPoints: BigNumber;
        totalPoolAllocPoints: BigNumber;
        name: string;
      }
    >;

    catPools(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    categoriesLength(overrides?: CallOverrides): Promise<BigNumber>;

    createCategory(
      _name: PromiseOrValue<string>,
      _allocPoints: PromiseOrValue<BigNumberish>,
      _withUpdate: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    createPool(
      _catId: PromiseOrValue<BigNumberish>,
      _token: PromiseOrValue<string>,
      _allocPoints: PromiseOrValue<BigNumberish>,
      _depositFeeBP: PromiseOrValue<BigNumberish>,
      _harvestInterval: PromiseOrValue<BigNumberish>,
      _withUpdate: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    deposit(
      _poolId: PromiseOrValue<BigNumberish>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    dev(overrides?: CallOverrides): Promise<string>;

    devZKHPerSecond(overrides?: CallOverrides): Promise<BigNumber>;

    editCategory(
      _catId: PromiseOrValue<BigNumberish>,
      _allocPoints: PromiseOrValue<BigNumberish>,
      _withUpdate: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    editPool(
      _poolId: PromiseOrValue<BigNumberish>,
      _allocPoints: PromiseOrValue<BigNumberish>,
      _depositFeeBP: PromiseOrValue<BigNumberish>,
      _harvestInterval: PromiseOrValue<BigNumberish>,
      _withUpdate: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    elapsedTime(overrides?: CallOverrides): Promise<BigNumber>;

    emergencyWithdraw(
      _poolId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    endTime(overrides?: CallOverrides): Promise<BigNumber>;

    farmingDuration(overrides?: CallOverrides): Promise<BigNumber>;

    feeCollector(overrides?: CallOverrides): Promise<string>;

    getMultiplier(
      _from: PromiseOrValue<BigNumberish>,
      _to: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    massUpdatePools(overrides?: CallOverrides): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    pendingReward(
      _poolId: PromiseOrValue<BigNumberish>,
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    poolInfo(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        token: string;
        catId: BigNumber;
        allocPoints: BigNumber;
        lastRewardTime: BigNumber;
        accZKHPerShare: BigNumber;
        depositFeeBP: BigNumber;
        harvestInterval: BigNumber;
      }
    >;

    poolsInCategory(
      _catId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    poolsLength(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    rewardZKHPerSecond(overrides?: CallOverrides): Promise<BigNumber>;

    startTime(overrides?: CallOverrides): Promise<BigNumber>;

    tokensAdded(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalCatAllocPoints(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    treasurer(overrides?: CallOverrides): Promise<string>;

    updateDev(
      _newDev: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateEndTime(
      _withUpdate: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateFeeCollector(
      _newFeeCollector: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    updatePool(
      _poolId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateStartTime(
      _newStartTime: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateZKHPerSecond(
      _newZKHPerSecond: PromiseOrValue<BigNumberish>,
      _withUpdate: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    userInfo(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        amount: BigNumber;
        rewardDebt: BigNumber;
        nextHarvestTime: BigNumber;
        lockedReward: BigNumber;
      }
    >;

    withdraw(
      _poolId: PromiseOrValue<BigNumberish>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    zkh(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "CategoryCreate(uint256,string,uint256)"(
      id?: null,
      name?: PromiseOrValue<string> | null,
      allocPoints?: null
    ): CategoryCreateEventFilter;
    CategoryCreate(
      id?: null,
      name?: PromiseOrValue<string> | null,
      allocPoints?: null
    ): CategoryCreateEventFilter;

    "CategoryEdit(uint256,uint256)"(
      id?: null,
      allocPoints?: null
    ): CategoryEditEventFilter;
    CategoryEdit(id?: null, allocPoints?: null): CategoryEditEventFilter;

    "Deposit(address,uint256,uint256,uint256)"(
      user?: PromiseOrValue<string> | null,
      pid?: PromiseOrValue<BigNumberish> | null,
      amount?: null,
      fee?: null
    ): DepositEventFilter;
    Deposit(
      user?: PromiseOrValue<string> | null,
      pid?: PromiseOrValue<BigNumberish> | null,
      amount?: null,
      fee?: null
    ): DepositEventFilter;

    "EmergencyWithdraw(address,uint256,uint256)"(
      user?: PromiseOrValue<string> | null,
      pid?: PromiseOrValue<BigNumberish> | null,
      amount?: null
    ): EmergencyWithdrawEventFilter;
    EmergencyWithdraw(
      user?: PromiseOrValue<string> | null,
      pid?: PromiseOrValue<BigNumberish> | null,
      amount?: null
    ): EmergencyWithdrawEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "PoolCreate(address,uint256,uint256,uint256,uint256)"(
      token?: PromiseOrValue<string> | null,
      catId?: PromiseOrValue<BigNumberish> | null,
      allocPoints?: null,
      depositFeeBP?: null,
      harvestInterval?: null
    ): PoolCreateEventFilter;
    PoolCreate(
      token?: PromiseOrValue<string> | null,
      catId?: PromiseOrValue<BigNumberish> | null,
      allocPoints?: null,
      depositFeeBP?: null,
      harvestInterval?: null
    ): PoolCreateEventFilter;

    "PoolEdit(address,uint256,uint256,uint256,uint256)"(
      token?: PromiseOrValue<string> | null,
      catId?: PromiseOrValue<BigNumberish> | null,
      allocPoints?: null,
      depositFeeBP?: null,
      harvestInterval?: null
    ): PoolEditEventFilter;
    PoolEdit(
      token?: PromiseOrValue<string> | null,
      catId?: PromiseOrValue<BigNumberish> | null,
      allocPoints?: null,
      depositFeeBP?: null,
      harvestInterval?: null
    ): PoolEditEventFilter;

    "Withdraw(address,uint256,uint256)"(
      user?: PromiseOrValue<string> | null,
      pid?: PromiseOrValue<BigNumberish> | null,
      amount?: null
    ): WithdrawEventFilter;
    Withdraw(
      user?: PromiseOrValue<string> | null,
      pid?: PromiseOrValue<BigNumberish> | null,
      amount?: null
    ): WithdrawEventFilter;
  };

  estimateGas: {
    MAX_DEPOSIT_FEE_BP(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_HARVEST_INTERVAL(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_ZKH_PER_SECOND(overrides?: CallOverrides): Promise<BigNumber>;

    ZKHPerSecond(overrides?: CallOverrides): Promise<BigNumber>;

    canHarvest(
      _poolId: PromiseOrValue<BigNumberish>,
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    catInfo(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    catPools(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    categoriesLength(overrides?: CallOverrides): Promise<BigNumber>;

    createCategory(
      _name: PromiseOrValue<string>,
      _allocPoints: PromiseOrValue<BigNumberish>,
      _withUpdate: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    createPool(
      _catId: PromiseOrValue<BigNumberish>,
      _token: PromiseOrValue<string>,
      _allocPoints: PromiseOrValue<BigNumberish>,
      _depositFeeBP: PromiseOrValue<BigNumberish>,
      _harvestInterval: PromiseOrValue<BigNumberish>,
      _withUpdate: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    deposit(
      _poolId: PromiseOrValue<BigNumberish>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    dev(overrides?: CallOverrides): Promise<BigNumber>;

    devZKHPerSecond(overrides?: CallOverrides): Promise<BigNumber>;

    editCategory(
      _catId: PromiseOrValue<BigNumberish>,
      _allocPoints: PromiseOrValue<BigNumberish>,
      _withUpdate: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    editPool(
      _poolId: PromiseOrValue<BigNumberish>,
      _allocPoints: PromiseOrValue<BigNumberish>,
      _depositFeeBP: PromiseOrValue<BigNumberish>,
      _harvestInterval: PromiseOrValue<BigNumberish>,
      _withUpdate: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    elapsedTime(overrides?: CallOverrides): Promise<BigNumber>;

    emergencyWithdraw(
      _poolId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    endTime(overrides?: CallOverrides): Promise<BigNumber>;

    farmingDuration(overrides?: CallOverrides): Promise<BigNumber>;

    feeCollector(overrides?: CallOverrides): Promise<BigNumber>;

    getMultiplier(
      _from: PromiseOrValue<BigNumberish>,
      _to: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    massUpdatePools(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pendingReward(
      _poolId: PromiseOrValue<BigNumberish>,
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    poolInfo(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    poolsInCategory(
      _catId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    poolsLength(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    rewardZKHPerSecond(overrides?: CallOverrides): Promise<BigNumber>;

    startTime(overrides?: CallOverrides): Promise<BigNumber>;

    tokensAdded(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalCatAllocPoints(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    treasurer(overrides?: CallOverrides): Promise<BigNumber>;

    updateDev(
      _newDev: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateEndTime(
      _withUpdate: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateFeeCollector(
      _newFeeCollector: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updatePool(
      _poolId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateStartTime(
      _newStartTime: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateZKHPerSecond(
      _newZKHPerSecond: PromiseOrValue<BigNumberish>,
      _withUpdate: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    userInfo(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdraw(
      _poolId: PromiseOrValue<BigNumberish>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    zkh(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    MAX_DEPOSIT_FEE_BP(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    MAX_HARVEST_INTERVAL(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    MAX_ZKH_PER_SECOND(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ZKHPerSecond(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    canHarvest(
      _poolId: PromiseOrValue<BigNumberish>,
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    catInfo(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    catPools(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    categoriesLength(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    createCategory(
      _name: PromiseOrValue<string>,
      _allocPoints: PromiseOrValue<BigNumberish>,
      _withUpdate: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    createPool(
      _catId: PromiseOrValue<BigNumberish>,
      _token: PromiseOrValue<string>,
      _allocPoints: PromiseOrValue<BigNumberish>,
      _depositFeeBP: PromiseOrValue<BigNumberish>,
      _harvestInterval: PromiseOrValue<BigNumberish>,
      _withUpdate: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    deposit(
      _poolId: PromiseOrValue<BigNumberish>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    dev(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    devZKHPerSecond(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    editCategory(
      _catId: PromiseOrValue<BigNumberish>,
      _allocPoints: PromiseOrValue<BigNumberish>,
      _withUpdate: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    editPool(
      _poolId: PromiseOrValue<BigNumberish>,
      _allocPoints: PromiseOrValue<BigNumberish>,
      _depositFeeBP: PromiseOrValue<BigNumberish>,
      _harvestInterval: PromiseOrValue<BigNumberish>,
      _withUpdate: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    elapsedTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    emergencyWithdraw(
      _poolId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    endTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    farmingDuration(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    feeCollector(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getMultiplier(
      _from: PromiseOrValue<BigNumberish>,
      _to: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    massUpdatePools(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pendingReward(
      _poolId: PromiseOrValue<BigNumberish>,
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    poolInfo(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    poolsInCategory(
      _catId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    poolsLength(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    rewardZKHPerSecond(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    startTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokensAdded(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalCatAllocPoints(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    treasurer(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    updateDev(
      _newDev: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateEndTime(
      _withUpdate: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateFeeCollector(
      _newFeeCollector: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updatePool(
      _poolId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateStartTime(
      _newStartTime: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateZKHPerSecond(
      _newZKHPerSecond: PromiseOrValue<BigNumberish>,
      _withUpdate: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    userInfo(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdraw(
      _poolId: PromiseOrValue<BigNumberish>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    zkh(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
